name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

      - name: Build project
        run: mvn clean compile package -DskipTests

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## MLP Project Manager ${{ steps.get_version.outputs.VERSION }}
            
            Terminal-based project manager
          draft: false
          prerelease: false

      - name: Find shaded JAR file
        id: find_jar
        run: |
          JAR_FILE=$(find target -name "*-shaded.jar" -o -name "mlp-project-manager-*.jar" | grep -v sources | grep -v javadoc | head -1)
          if [ -z "$JAR_FILE" ]; then
            JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
          fi
          echo "JAR_PATH=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "JAR_NAME=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.JAR_PATH }}
          asset_name: ${{ steps.find_jar.outputs.JAR_NAME }}
          asset_content_type: application/java-archive
